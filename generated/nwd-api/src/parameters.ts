// @generated by
//
//   ██████╗ ██████╗ ███████╗███╗   ██╗ █████╗ ██████╗ ██╗██╗  ██╗██████╗
//  ██╔═══██╗██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔══██╗██║██║  ██║╚════██╗
//  ██║   ██║██████╔╝█████╗  ██╔██╗ ██║███████║██████╔╝██║███████║ █████╔╝
//  ██║   ██║██╔═══╝ ██╔══╝  ██║╚██╗██║██╔══██║██╔═══╝ ██║╚════██║██╔═══╝
//  ╚██████╔╝██║     ███████╗██║ ╚████║██║  ██║██║     ██║     ██║███████╗
//   ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     ╚═╝     ╚═╝╚══════╝
//   v0.1.5                                           -- www.OpenApi42.org
import * as types from "./types.js";
import * as validators from "./validators.js";
import * as parsers from "./parsers.js";
export interface ParameterValidationError {
parameterName: string;
path: string;
rule: string;
typeName?: string;
}
let lastParameterValidationError: ParameterValidationError | undefined;
export function getLastParameterValidationError() {
if(lastParameterValidationError == null) {
throw new TypeError("no validation errors");
}
return lastParameterValidationError;
}
function recordError(
parameterName: string,
path: string,
rule: string,
typeName?: string
) {
lastParameterValidationError = {
parameterName,
path,
rule,
typeName,
}
}
export function isEchoViaGetRequestParameters(
parameters: Partial<Record<keyof EchoViaGetRequestParameters, unknown>>,
): parameters is EchoViaGetRequestParameters {
if(parameters.message === undefined) {
recordError(
"message",
"",
"required"
);
return false;
}
if(!validators.isParametersSchema(
parameters.message
)) {
const lastValidationError = validators.getLastValidationError();
recordError(
"message",
lastValidationError.path,
lastValidationError.rule,
lastValidationError.typeName,
);
return false;
}
return true;
}
export type EchoViaGetRequestParameters = {
message:
types.ParametersSchema
};
export function isEchoViaGet200ResponseParameters(
parameters: Partial<Record<keyof EchoViaGet200ResponseParameters, unknown>>,
): parameters is EchoViaGet200ResponseParameters {
return true;
}
export type EchoViaGet200ResponseParameters = {
};
export function isEchoRequestParameters(
parameters: Partial<Record<keyof EchoRequestParameters, unknown>>,
): parameters is EchoRequestParameters {
return true;
}
export type EchoRequestParameters = {
};
export function isEcho200ResponseParameters(
parameters: Partial<Record<keyof Echo200ResponseParameters, unknown>>,
): parameters is Echo200ResponseParameters {
return true;
}
export type Echo200ResponseParameters = {
};
